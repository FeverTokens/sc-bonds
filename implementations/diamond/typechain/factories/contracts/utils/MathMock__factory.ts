/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MathMock,
  MathMockInterface,
} from "../../../contracts/utils/MathMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "abs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "average",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "sqrt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061029e806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063677342ce11610050578063677342ce146100a45780636d5433e6146100b75780637ae2b5c7146100ca57600080fd5b80631b5ac4b51461006c5780632b7423ab14610091575b600080fd5b61007f61007a3660046101aa565b6100dd565b60405190815260200160405180910390f35b61007f61009f3660046101c3565b6100ee565b61007f6100b23660046101aa565b610102565b61007f6100c53660046101c3565b61010d565b61007f6100d83660046101c3565b610119565b60006100e882610125565b92915050565b600081831682841860011c015b9392505050565b60006100e88261013d565b60006100fb8383610185565b60006100fb838361019b565b600080821261013457816100e8565b6100e8826101fb565b600080600161014c8482610233565b901c90508291505b8181101561017f5790508060018161016c8186610246565b6101769190610233565b901c9050610154565b50919050565b600081831161019457816100fb565b5090919050565b600081831161017f57826100fb565b6000602082840312156101bc57600080fd5b5035919050565b600080604083850312156101d657600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b60007f8000000000000000000000000000000000000000000000000000000000000000820361022c5761022c6101e5565b5060000390565b808201808211156100e8576100e86101e5565b60008261026357634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220fc2dae361445cbb08f823b880320f289d65dc6d397a9ad2005ec91f9467094f164736f6c63430008140033";

type MathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathMock__factory extends ContractFactory {
  constructor(...args: MathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MathMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MathMock__factory {
    return super.connect(runner) as MathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathMockInterface {
    return new Interface(_abi) as MathMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MathMock {
    return new Contract(address, _abi, runner) as unknown as MathMock;
  }
}
