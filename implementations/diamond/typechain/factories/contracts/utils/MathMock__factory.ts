/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MathMock,
  MathMockInterface,
} from "../../../contracts/utils/MathMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
    ],
    name: "abs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "average",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "sqrt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b506102868061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610064575f3560e01c8063677342ce1161004d578063677342ce146100a05780636d5433e6146100b35780637ae2b5c7146100c6575f80fd5b80631b5ac4b5146100685780632b7423ab1461008d575b5f80fd5b61007b61007636600461019d565b6100d9565b60405190815260200160405180910390f35b61007b61009b3660046101b4565b6100e9565b61007b6100ae36600461019d565b6100fc565b61007b6100c13660046101b4565b610106565b61007b6100d43660046101b4565b610111565b5f6100e38261011c565b92915050565b5f81831682841860011c015b9392505050565b5f6100e382610133565b5f6100f5838361017a565b5f6100f5838361018f565b5f80821261012a57816100e3565b6100e3826101e8565b5f806001610141848261021e565b901c90508291505b81811015610174579050806001816101618186610231565b61016b919061021e565b901c9050610149565b50919050565b5f81831161018857816100f5565b5090919050565b5f81831161017457826100f5565b5f602082840312156101ad575f80fd5b5035919050565b5f80604083850312156101c5575f80fd5b50508035926020909101359150565b634e487b7160e01b5f52601160045260245ffd5b5f7f80000000000000000000000000000000000000000000000000000000000000008203610218576102186101d4565b505f0390565b808201808211156100e3576100e36101d4565b5f8261024b57634e487b7160e01b5f52601260045260245ffd5b50049056fea2646970667358221220e63a7d7f87b15df102f557e78397cc6a4c8471bcb50aed746f527b1d51f8491664736f6c63430008140033";

type MathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MathMock__factory extends ContractFactory {
  constructor(...args: MathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MathMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MathMock__factory {
    return super.connect(runner) as MathMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MathMockInterface {
    return new Interface(_abi) as MathMockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MathMock {
    return new Contract(address, _abi, runner) as unknown as MathMock;
  }
}
