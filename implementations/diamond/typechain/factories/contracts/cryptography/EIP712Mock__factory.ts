/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  EIP712Mock,
  EIP712MockInterface,
} from "../../../contracts/cryptography/EIP712Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "nameHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "versionHash",
        type: "bytes32",
      },
    ],
    name: "calculateDomainSeparator",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5060f18061001c5f395ff3fe6080604052348015600e575f80fd5b50600436106026575f3560e01c80638ec98aff14602a575b5f80fd5b60396035366004609c565b604b565b60405190815260200160405180910390f35b5f60958383604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8152602081019390935282015246606082015230608082015260a0902090565b9392505050565b5f806040838503121560ac575f80fd5b5050803592602090910135915056fea26469706673582212206acc38bb6473913f364d46b64f0e843ccff82ce75888c719d76312763ccc78c864736f6c63430008140033";

type EIP712MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EIP712MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EIP712Mock__factory extends ContractFactory {
  constructor(...args: EIP712MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EIP712Mock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EIP712Mock__factory {
    return super.connect(runner) as EIP712Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EIP712MockInterface {
    return new Interface(_abi) as EIP712MockInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): EIP712Mock {
    return new Contract(address, _abi, runner) as unknown as EIP712Mock;
  }
}
