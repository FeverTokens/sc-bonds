/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  BinaryHeapUintMock,
  BinaryHeapUintMockInterface,
} from "../../../contracts/data/BinaryHeapUintMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "add",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "at",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "contains",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "indexOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "length",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "remove",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "root",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "toArray",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105f7806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806391ac7e651161005b57806391ac7e65146100f3578063c34052e014610106578063e0886f9014610119578063ebf0c7171461012c57600080fd5b80631003e2d21461008d5780631f7b6d32146100b55780634cc82215146100cb578063908ff303146100de575b600080fd5b6100a061009b366004610538565b610134565b60405190151581526020015b60405180910390f35b6100bd610146565b6040519081526020016100ac565b6100a06100d9366004610538565b610157565b6100e6610163565b6040516100ac9190610551565b6100bd610101366004610538565b61016f565b6100a0610114366004610538565b61017b565b6100bd610127366004610538565b610187565b6100bd610193565b6000610140818361019f565b92915050565b600061015260006101b2565b905090565b600061014081836101bc565b606061015260006101c8565b60006101408183610224565b6000610140818361023e565b60006101408183610256565b60006101526000610262565b60006101ab838361026d565b9392505050565b6000610140825490565b60006101ab83836102bc565b8054604080516020808402820181019092528281526060928492839291839183018282801561021657602002820191906000526020600020905b815481526020019060010190808311610202575b505050505092505050919050565b6000818152600183016020526040812054600019016101ab565b600081815260018301602052604081205415156101ab565b60006101ab838361034b565b600061014082610375565b600081815260018301602052604081205461014057825460018101845560008481526020902001829055825460008381526001850160205260409020556102b383610382565b50600192915050565b6000818152600183016020526040812054156101405760008281526001840160205260408120546000190190506102fe848260016102f8885490565b036103b2565b835484908061030f5761030f610595565b600082815260208082208301600019908101839055909201909255848252600186019052604081205561034184610382565b5060019392505050565b6000826000018281548110610362576103626105ab565b9060005260206000200154905092915050565b600061014082600061034b565b600061038c825490565b9050600281045b80156103ad57600019016103a8838383610468565b610393565b505050565b825483906000908290859081106103cb576103cb6105ab565b9060005260206000200154905060008284815481106103ec576103ec6105ab565b90600052602060002001549050808284878154811061040d5761040d6105ab565b90600052602060002001600086888154811061042b5761042b6105ab565b6000918252602080832090910194909455939091555082825260019097019096526040808720805493885290872080549290975255909355505050565b8083600182811b811790810185821080156104ba5750828281548110610490576104906105ab565b90600052602060002001548385815481106104ad576104ad6105ab565b9060005260206000200154105b156104c3578193505b858110801561050957508281815481106104df576104df6105ab565b90600052602060002001548385815481106104fc576104fc6105ab565b9060005260206000200154105b15610512578093505b5050828214610531576105268584846103b2565b610531858584610468565b5050505050565b60006020828403121561054a57600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156105895783518352928401929184019160010161056d565b50909695505050505050565b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220581cc5b6f3969e6d7334f574fec9f5a1fac8d7bee6c91f01e491a7f05d06dc6164736f6c63430008140033";

type BinaryHeapUintMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BinaryHeapUintMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BinaryHeapUintMock__factory extends ContractFactory {
  constructor(...args: BinaryHeapUintMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      BinaryHeapUintMock & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): BinaryHeapUintMock__factory {
    return super.connect(runner) as BinaryHeapUintMock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BinaryHeapUintMockInterface {
    return new Interface(_abi) as BinaryHeapUintMockInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BinaryHeapUintMock {
    return new Contract(address, _abi, runner) as unknown as BinaryHeapUintMock;
  }
}
