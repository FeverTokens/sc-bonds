/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface ICouponSnapshotManagementInternalInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "AssetLocked"
      | "AssetReleased"
      | "LockCancelled"
      | "LockSet"
      | "SnapshotTimestampChange"
  ): EventFragment;
}

export namespace AssetLockedEvent {
  export type InputTuple = [
    transactionID: BytesLike,
    paymentID: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    transactionID: string,
    paymentID: string,
    status: bigint
  ];
  export interface OutputObject {
    transactionID: string;
    paymentID: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AssetReleasedEvent {
  export type InputTuple = [
    transactionID: BytesLike,
    paymentID: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    transactionID: string,
    paymentID: string,
    status: bigint
  ];
  export interface OutputObject {
    transactionID: string;
    paymentID: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockCancelledEvent {
  export type InputTuple = [
    transactionID: BytesLike,
    paymentID: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    transactionID: string,
    paymentID: string,
    status: bigint
  ];
  export interface OutputObject {
    transactionID: string;
    paymentID: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockSetEvent {
  export type InputTuple = [
    transactionID: BytesLike,
    paymentID: BytesLike,
    status: BigNumberish
  ];
  export type OutputTuple = [
    transactionID: string,
    paymentID: string,
    status: bigint
  ];
  export interface OutputObject {
    transactionID: string;
    paymentID: string;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SnapshotTimestampChangeEvent {
  export type InputTuple = [
    couponDate: BigNumberish,
    currentTimestamp: BigNumberish,
    nextTimestamp: BigNumberish
  ];
  export type OutputTuple = [
    couponDate: bigint,
    currentTimestamp: bigint,
    nextTimestamp: bigint
  ];
  export interface OutputObject {
    couponDate: bigint;
    currentTimestamp: bigint;
    nextTimestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICouponSnapshotManagementInternal extends BaseContract {
  connect(runner?: ContractRunner | null): ICouponSnapshotManagementInternal;
  waitForDeployment(): Promise<this>;

  interface: ICouponSnapshotManagementInternalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "AssetLocked"
  ): TypedContractEvent<
    AssetLockedEvent.InputTuple,
    AssetLockedEvent.OutputTuple,
    AssetLockedEvent.OutputObject
  >;
  getEvent(
    key: "AssetReleased"
  ): TypedContractEvent<
    AssetReleasedEvent.InputTuple,
    AssetReleasedEvent.OutputTuple,
    AssetReleasedEvent.OutputObject
  >;
  getEvent(
    key: "LockCancelled"
  ): TypedContractEvent<
    LockCancelledEvent.InputTuple,
    LockCancelledEvent.OutputTuple,
    LockCancelledEvent.OutputObject
  >;
  getEvent(
    key: "LockSet"
  ): TypedContractEvent<
    LockSetEvent.InputTuple,
    LockSetEvent.OutputTuple,
    LockSetEvent.OutputObject
  >;
  getEvent(
    key: "SnapshotTimestampChange"
  ): TypedContractEvent<
    SnapshotTimestampChangeEvent.InputTuple,
    SnapshotTimestampChangeEvent.OutputTuple,
    SnapshotTimestampChangeEvent.OutputObject
  >;

  filters: {
    "AssetLocked(bytes32,bytes32,uint8)": TypedContractEvent<
      AssetLockedEvent.InputTuple,
      AssetLockedEvent.OutputTuple,
      AssetLockedEvent.OutputObject
    >;
    AssetLocked: TypedContractEvent<
      AssetLockedEvent.InputTuple,
      AssetLockedEvent.OutputTuple,
      AssetLockedEvent.OutputObject
    >;

    "AssetReleased(bytes32,bytes32,uint8)": TypedContractEvent<
      AssetReleasedEvent.InputTuple,
      AssetReleasedEvent.OutputTuple,
      AssetReleasedEvent.OutputObject
    >;
    AssetReleased: TypedContractEvent<
      AssetReleasedEvent.InputTuple,
      AssetReleasedEvent.OutputTuple,
      AssetReleasedEvent.OutputObject
    >;

    "LockCancelled(bytes32,bytes32,uint8)": TypedContractEvent<
      LockCancelledEvent.InputTuple,
      LockCancelledEvent.OutputTuple,
      LockCancelledEvent.OutputObject
    >;
    LockCancelled: TypedContractEvent<
      LockCancelledEvent.InputTuple,
      LockCancelledEvent.OutputTuple,
      LockCancelledEvent.OutputObject
    >;

    "LockSet(bytes32,bytes32,uint8)": TypedContractEvent<
      LockSetEvent.InputTuple,
      LockSetEvent.OutputTuple,
      LockSetEvent.OutputObject
    >;
    LockSet: TypedContractEvent<
      LockSetEvent.InputTuple,
      LockSetEvent.OutputTuple,
      LockSetEvent.OutputObject
    >;

    "SnapshotTimestampChange(uint256,uint256,uint256)": TypedContractEvent<
      SnapshotTimestampChangeEvent.InputTuple,
      SnapshotTimestampChangeEvent.OutputTuple,
      SnapshotTimestampChangeEvent.OutputObject
    >;
    SnapshotTimestampChange: TypedContractEvent<
      SnapshotTimestampChangeEvent.InputTuple,
      SnapshotTimestampChangeEvent.OutputTuple,
      SnapshotTimestampChangeEvent.OutputObject
    >;
  };
}
