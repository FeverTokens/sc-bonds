/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../../common";

export interface ICouponInternalInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "CouponChanged" | "CouponPaymentStatusChanged"
  ): EventFragment;
}

export namespace CouponChangedEvent {
  export type InputTuple = [couponDate: BigNumberish, status: BigNumberish];
  export type OutputTuple = [couponDate: bigint, status: bigint];
  export interface OutputObject {
    couponDate: bigint;
    status: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CouponPaymentStatusChangedEvent {
  export type InputTuple = [
    couponDate: BigNumberish,
    investor: AddressLike,
    status: BigNumberish,
    previousStatus: BigNumberish
  ];
  export type OutputTuple = [
    couponDate: bigint,
    investor: string,
    status: bigint,
    previousStatus: bigint
  ];
  export interface OutputObject {
    couponDate: bigint;
    investor: string;
    status: bigint;
    previousStatus: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ICouponInternal extends BaseContract {
  connect(runner?: ContractRunner | null): ICouponInternal;
  waitForDeployment(): Promise<this>;

  interface: ICouponInternalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "CouponChanged"
  ): TypedContractEvent<
    CouponChangedEvent.InputTuple,
    CouponChangedEvent.OutputTuple,
    CouponChangedEvent.OutputObject
  >;
  getEvent(
    key: "CouponPaymentStatusChanged"
  ): TypedContractEvent<
    CouponPaymentStatusChangedEvent.InputTuple,
    CouponPaymentStatusChangedEvent.OutputTuple,
    CouponPaymentStatusChangedEvent.OutputObject
  >;

  filters: {
    "CouponChanged(uint256,uint8)": TypedContractEvent<
      CouponChangedEvent.InputTuple,
      CouponChangedEvent.OutputTuple,
      CouponChangedEvent.OutputObject
    >;
    CouponChanged: TypedContractEvent<
      CouponChangedEvent.InputTuple,
      CouponChangedEvent.OutputTuple,
      CouponChangedEvent.OutputObject
    >;

    "CouponPaymentStatusChanged(uint256,address,uint8,uint8)": TypedContractEvent<
      CouponPaymentStatusChangedEvent.InputTuple,
      CouponPaymentStatusChangedEvent.OutputTuple,
      CouponPaymentStatusChangedEvent.OutputObject
    >;
    CouponPaymentStatusChanged: TypedContractEvent<
      CouponPaymentStatusChangedEvent.InputTuple,
      CouponPaymentStatusChangedEvent.OutputTuple,
      CouponPaymentStatusChangedEvent.OutputObject
    >;
  };
}
