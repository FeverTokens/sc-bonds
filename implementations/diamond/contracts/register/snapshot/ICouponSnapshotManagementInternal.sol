// SPDX-License-Identifier: MIT
// FeverTokens Contracts v1.0.0

pragma solidity ^0.8.20;

interface ICouponSnapshotManagementInternal {
    /**
     * @notice The status of the HTLC.
     * @dev Unlocked: The asset is unlocked.
     * @dev Locked: The Asset is locked.
     * @dev Released: The Asset is released.
     * @dev ForceReleased: The Asset is force released.
     * @dev ForceCancelled: The Asset is force cancelled.
     */
    enum LockStatus {
        Unlocked,
        Locked,
        Released,
        ForceReleased,
        ForceCancelled
    }

    /**
     * @notice The lock information.
     * @dev seller: The address of the seller.
     * @dev buyer: The address of the buyer.
     * @dev registry: The address of the registry.
     * @dev transactionID: The unique transaction id (e.g. uti).
     * @dev paymentID: The unique payment id (e.g. uetr).
     * @dev signature: The swift signature.
     * @dev hashlock: The hash of the secret which unlocks the contract generated by Swift.
     * @dev hashRelease: The hash of the forced release.
     * @dev hashCancel: The hash of the forced cancel.
     * @dev paymentDate: The timestamp of when the payment will be released to the seller.
     * @dev deliveryDate: The timestamp of when the asset will be released to the buyer.
     * @dev status: The status of the HTLC.
     */
    struct LockInfo {
        address seller;
        address buyer;
        uint256 amount;
        bytes32 transactionID; // unique transaction id (e.g. uti)
        bytes32 paymentID; // unique payment id (e.g. uetr)
        bytes32 signature; // the swift signature
        bytes32 hashlock; // hash of the secret which unlocks the contract generated by Swift
        bytes32 hashRelease; // hash of the forced release
        bytes32 hashCancel; // hash of the forced cancel
        uint256 paymentDate; // timestamp of when the payment will be released to the seller
        uint256 deliveryDate; // timestamp of when the asset will be released to the buyer
        LockStatus status; // status of the HTLC
    }

    /**
     * @notice The artifacts of the HTLC.
     * @dev paymentProof: The proof of the payment.
     * @dev secret: The secret of standard release.
     * @dev secretRelease: The secret of the forced release.
     * @dev secretCancel: The secret of the forced cancel.
     */
    struct Artifacts {
        bytes32 paymentProof;
        bytes32 secret;
        bytes32 secretRelease;
        bytes32 secretCancel;
    }

    /**
     * @notice The snapshot information.
     * @dev snapshotId: The unique snapshot id.
     * @dev couponDate: The coupon date.
     * @dev timestamp: The timestamp of the snapshot.
     */
    event SnapshotTimestampChange(
        uint256 indexed couponDate,
        uint256 indexed currentTimestamp,
        uint256 indexed nextTimestamp
    );

    /**
     * @notice Event emitted when the lock is set.
     * @param transactionID The unique transaction id (e.g. uti).
     * @param paymentID The unique payment id (e.g. uetr).
     * @param status The status of the HTLC.
     */
    event LockSet(
        bytes32 indexed transactionID,
        bytes32 indexed paymentID,
        LockStatus status
    );

    /**
     * @notice Event emitted when the asset is locked.
     * @param transactionID The unique transaction id (e.g. uti).
     * @param paymentID The unique payment id (e.g. uetr).
     * @param status The status of the HTLC.
     */
    event AssetLocked(
        bytes32 indexed transactionID,
        bytes32 indexed paymentID,
        LockStatus status
    );

    /**
     * @notice Event emitted when the asset is released.
     * @param transactionID The unique transaction id (e.g. uti).
     * @param paymentID The unique payment id (e.g. uetr).
     * @param status The status of the HTLC.
     */
    event AssetReleased(
        bytes32 indexed transactionID,
        bytes32 indexed paymentID,
        LockStatus status
    );

    /**
     * @notice Event emitted when the Lock is cancelled.
     * @param transactionID The unique transaction id (e.g. uti).
     * @param paymentID The unique payment id (e.g. uetr).
     * @param status The status of the HTLC.
     */
    event LockCancelled(
        bytes32 indexed transactionID,
        bytes32 indexed paymentID,
        LockStatus status
    );
}
